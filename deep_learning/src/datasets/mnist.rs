/* -*- tab-width:4 -*- */
use std::io::{Write, Read, Seek, SeekFrom, BufReader};
use std::fs;
use std::path::Path;
use std::error::Error;
use std::fmt::Display;
use binary_layout::prelude::*;
use flate2::bufread::GzDecoder;
use minifb::{Key, Window, WindowOptions};

use linear_transform::tensor::Tensor;
use crate::neuron::NeuronPrimType;
use crate::datasets::loader::LoaderSource;

#[derive(Debug)]
enum MyError {
	StringMsg(String)
}

impl Display for MyError {
	fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
		use self::MyError::*;
		match self {
			StringMsg(s) => write!(f, "{}", s)
		}
	}
}

impl Error for MyError {}

struct DataFile {
	target: &'static str,
	label: &'static str
}

struct MnistImage {
	num_of_images: usize,
	row: usize,
	col: usize
}

pub struct MNIST {
	target_file_path: String,
	label_file_path: String,
	target_file_bufread: BufReader<fs::File>,
	label_file_bufread: BufReader<fs::File>,
	image_property: MnistImage
}

const MNIST_URL:&str = "http://yann.lecun.com/exdb/mnist";
const DATASET_DIR:&str = "./datasets/mnist";

const datasets:[DataFile;2] = [
	DataFile {
		target: "train-images-idx3-ubyte.gz",
		label:  "train-labels-idx1-ubyte.gz"
	},
	DataFile {
		target: "t10k-images-idx3-ubyte.gz",
		label:  "t10k-labels-idx1-ubyte.gz"
	}
];

const label_table:[char;10] = [ '0','1','2','3','4','5','6','7','8','9' ];

define_layout!(mnist_label_header, BigEndian, {
    magic: u32,
    num_of_labels: u32,
});

define_layout!(mnist_image_header, BigEndian, {
    magic: u32,
    num_of_images: u32,
    row: u32,
    col: u32
});

fn download_dataset() -> Result<(),Box<dyn std::error::Error>> {

    let dirpath = Path::new(DATASET_DIR);
	if !dirpath.exists() {
		fs::create_dir_all(DATASET_DIR)?;
	}
	for set in datasets.iter() {
		let arc_file_path_str = DATASET_DIR.to_string() + "/" + &set.target;
		let arc_file_path = Path::new(&arc_file_path_str);
		if !arc_file_path.exists() {
			let mut output_file = fs::File::create( arc_file_path )?;
			let mut curl = curl::easy::Easy::new();
			let target_url = MNIST_URL.to_string()+"/"+&set.target;
			curl.url(&target_url)?;
			curl.write_function(move|data| {
				output_file.write_all(data).unwrap();
				Ok(data.len())
			})?;
			curl.perform()?;
		}
		let extract_file_str  = arc_file_path.file_stem().unwrap().to_str().unwrap();
		let extract_file_path_str = DATASET_DIR.to_string() + "/" + extract_file_str;
		let extract_file_path = Path::new(&extract_file_path_str);
		if !extract_file_path.exists() {
			let mut extract_file = fs::File::create(extract_file_path)?;
			let arc_file = fs::File::open(arc_file_path_str)?;
			let bufreader = BufReader::new(arc_file);
			let mut decoder = GzDecoder::new(bufreader);
			std::io::copy(&mut decoder, &mut extract_file)?;
		}

		let arc_file_path_str = DATASET_DIR.to_string() + "/" + &set.label;
		let arc_file_path = Path::new(&arc_file_path_str);
		if !arc_file_path.exists() {
			let mut output_file = fs::File::create( arc_file_path )?;
			let mut curl = curl::easy::Easy::new();
			let target_url = MNIST_URL.to_string()+"/"+&set.label;
			curl.url(&target_url)?;
			curl.write_function(move|data| {
				output_file.write_all(data).unwrap();
				Ok(data.len())
			})?;
			curl.perform()?;
		}

		let extract_file_str  = arc_file_path.file_stem().unwrap().to_str().unwrap();
		let extract_file_path_str = DATASET_DIR.to_string() + "/" + extract_file_str;
		let extract_file_path = Path::new(&extract_file_path_str);
		if !extract_file_path.exists() {
			let mut extract_file = fs::File::create(extract_file_path)?;
			let arc_file = fs::File::open(arc_file_path_str)?;
			let bufreader = BufReader::new(arc_file);
			let mut decoder = GzDecoder::new(bufreader);
			std::io::copy(&mut decoder, &mut extract_file)?;
		}
	}
	Ok(())
}

pub fn get_dataset(train:bool) -> Result<MNIST,Box<dyn std::error::Error>> {

	download_dataset()?;

	let target_file_path = if train {
		DATASET_DIR.to_string() + "/" + Path::new(datasets[0].target).file_stem().unwrap().to_str().unwrap()
	}
	else {
		DATASET_DIR.to_string() + "/" + Path::new(datasets[1].target).file_stem().unwrap().to_str().unwrap()
	};

	let label_file_path = if train {
		DATASET_DIR.to_string() + "/" + Path::new(datasets[0].label).file_stem().unwrap().to_str().unwrap()
	}
	else {
		DATASET_DIR.to_string() + "/" + Path::new(datasets[1].label).file_stem().unwrap().to_str().unwrap()
	};

	let mut target_file_bufread = BufReader::new(
		fs::File::open(target_file_path.clone()).expect("Failed to open target file")
	);

	let mut label_file_bufread =  BufReader::new(
		fs::File::open(label_file_path.clone()).expect("Failed to open label file")
	);

	let mnist_label_header = {
		let mut buf:[u8;8] = [0;8];
		label_file_bufread.read(&mut buf)?;
		mnist_label_header::View::new(buf)
	};
	if mnist_label_header.magic().read() != 0x00000801 {
		return Err(Box::new(MyError::StringMsg("invalid magic number".to_string())));
	}
	let num_of_labels = mnist_label_header.num_of_labels().read();

	let mnist_image_header = {
		let mut buf:[u8;16] = [0;16];
		target_file_bufread.read(&mut buf)?;
		mnist_image_header::View::new(buf)
	};
	if mnist_image_header.magic().read() != 0x00000803 {
		return Err(Box::new(MyError::StringMsg("invalid magic number".to_string())));
	}
	let num_of_images = mnist_image_header.num_of_images().read();
	let row_of_image = mnist_image_header.row().read();
	let col_of_image = mnist_image_header.col().read();

	if num_of_images != num_of_labels {
		return Err(Box::new(MyError::StringMsg("num of labels is different from num of images.".to_string())));
	}

	Ok(MNIST {
		target_file_path:    target_file_path,
		label_file_path:     label_file_path,
		target_file_bufread: target_file_bufread,
		label_file_bufread:  label_file_bufread,
		image_property: MnistImage {
			num_of_images: num_of_images as usize,
			row: row_of_image as usize,
			col: col_of_image as usize
		}
	})
}

const WIDTH:usize  = 160;
const HEIGHT:usize = 100;
const BITMAP_START_LEFT:usize = 20;
const BITMAP_START_TOP:usize  = 30;

impl MNIST {

	pub fn show(&mut self, no:usize) -> Result<(), Box<dyn std::error::Error>> {
		let mut frame_buf:Vec<u32> = Vec::with_capacity(WIDTH*HEIGHT);
		let mut window = Window::new("mnist", WIDTH, HEIGHT, WindowOptions::default())?;
		let size_of_image = self.image_property.row*self.image_property.col;
		let mut image_buf:Vec<u8> = Vec::with_capacity(size_of_image);
		let pos_of_image:u64 = (16+no*size_of_image) as u64;
		let pos_of_label:u64 = (8+no) as u64;
		let mut label_byte:[u8;1] = [0;1];
		self.label_file_bufread.seek(SeekFrom::Start(pos_of_label))?;
		self.label_file_bufread.read(&mut label_byte)?;

		frame_buf.resize(WIDTH*HEIGHT,0);
		image_buf.resize(size_of_image,0);
		self.target_file_bufread.seek(SeekFrom::Start(pos_of_image))?;
		self.target_file_bufread.read(&mut image_buf)?;
		for j in 0..self.image_property.row {
			for i in 0..self.image_property.col {
				let pixel:u32 =
					((0xFF << 24)|
					 ((image_buf[j*self.image_property.row+i] as u32) << 16)|
					 ((image_buf[j*self.image_property.row+i] as u32) << 8)|
					 ((image_buf[j*self.image_property.row+i] as u32) << 0)).into();
				frame_buf[(BITMAP_START_TOP+j)*WIDTH+BITMAP_START_LEFT+i] = pixel;
			}
		}
		let status_text = StatusText::new(WIDTH,HEIGHT,1);
		status_text.draw(&mut frame_buf, (5,10), &format!("label: {}",label_byte[0]));
		status_text.draw(&mut frame_buf, (10,80), "Press ESC to Exit");
		while window.is_open() && !window.is_key_down(Key::Escape) {
			window.update_with_buffer(&frame_buf,WIDTH,HEIGHT);
		}
		Ok(())
	}
}

impl<T> LoaderSource<T> for MNIST where T:NeuronPrimType<T> {
	fn load_batch(&mut self, index:usize, batch_size:usize, permute_table:&Option<Vec<usize>>) -> Option<(Tensor<T>,Tensor<T>)> {
		if  self.image_property.num_of_images < index*batch_size ||
			self.image_property.num_of_images < (index+1)*batch_size
		{
			return None;
		}
		let in_order_table = (index*batch_size..(index+1)*batch_size).collect::<Vec<usize>>();
		let table = if let Some(table) = permute_table {
			&table[index*batch_size..(index+1)*batch_size]
		}
		else {
			&in_order_table
		};
		let size_of_image = self.image_property.row*self.image_property.col;
		let mut image_buf:Vec<u8> = Vec::with_capacity(self.image_property.row*self.image_property.col);
		image_buf.resize(size_of_image, 0);
		let mut label = [0u8;1];
		let mut image_tensors:Vec<Tensor<T>> = Vec::new();
		let mut labels:Vec<T> = Vec::new();
		for pos in table.iter() {
			let pos_of_label:u64 = (8 + pos) as u64;
			let pos_of_image:u64 = (16 + pos*size_of_image) as u64;
			if let Err(_) = self.label_file_bufread.seek(SeekFrom::Start(pos_of_label)) {
				return None;
			}
			if let Err(_) = self.target_file_bufread.seek(SeekFrom::Start(pos_of_image)) {
				return None;
			}
			if let Err(_) = self.label_file_bufread.read(&mut label) {
				return None;
			}
			if let Err(_) = self.target_file_bufread.read(&mut image_buf) {
				return None;
			}
			let normalized_buffer:Vec<T> =
				image_buf.iter().map(|v| {
					let f:T = num::FromPrimitive::from_u8(*v).unwrap();
					f / num::FromPrimitive::from_f64(255.0).unwrap()
				}).collect();
			image_tensors.push(Tensor::from_vector(vec![1,self.image_property.row*self.image_property.col],
												   normalized_buffer));
			labels.push(num::FromPrimitive::from_u8(label[0]).unwrap());
		}
		Some((Tensor::from_vector(vec![batch_size,1],labels) ,Tensor::<T>::bind(image_tensors)))
	}

	fn get_num_of_samples(&self) -> usize {
		self.image_property.num_of_images
	}

	fn get_sample_shape(&self) -> Vec<usize> {
		vec![1, self.image_property.row*self.image_property.col]
	}
}

pub struct StatusText {
    texture: Vec<u32>,
    width: usize,
    //height: usize,
    scale: usize,
}

#[inline(always)]
fn color_from_bit(bit: u8) -> u32 {
    if bit == 0 {
        0x00000000
    } else {
        0xFFFFFFFF
    }
}

impl StatusText {
    pub fn new(width: usize, _height: usize, scale: usize) -> Self {
        // unpack texture for easier drawing
        let mut texture = Vec::with_capacity(128 * 128);

        for t in MICROKNIGHT_FONT {
            texture.push(color_from_bit((t >> 7) & 1));
            texture.push(color_from_bit((t >> 6) & 1));
            texture.push(color_from_bit((t >> 5) & 1));
            texture.push(color_from_bit((t >> 4) & 1));
            texture.push(color_from_bit((t >> 3) & 1));
            texture.push(color_from_bit((t >> 2) & 1));
            texture.push(color_from_bit((t >> 1) & 1));
            texture.push(color_from_bit(t & 1));
        }

        Self {
            texture,
            width,
            //height,
            scale,
        }
    }

    pub fn draw(&self, screen: &mut [u32], pos: (usize, usize), text: &str) {
        let mut x = pos.0;
        let y = pos.1;
        for c in text.chars() {
            let mut index = c as usize - ' ' as usize;
            if index > MICROKNIGHT_LAYOUT.len() as usize {
                index = 0;
            }

            let layout = MICROKNIGHT_LAYOUT[index];
            let texture_offset = (layout.1 as usize * 128) + layout.0 as usize;

            for fy in 0..8 * self.scale {
                let ty = fy / self.scale;
                for fx in 0..8 * self.scale {
                    let tx = fx / self.scale;
                    let pixel = texture_offset + (ty * 128) + tx;
                    if pixel != 0 {
                        screen[((y + fy) * self.width) + fx + x] = self.texture[pixel];
                    }
                }
            }

            x += 8 * self.scale;
        }
    }
}

// Microknight font (128x128 packed with 1 bit per pixel)
#[rustfmt::skip]
pub static MICROKNIGHT_FONT: &[u8] = &[
    0x00, 0x0c, 0x1b, 0x0d, 0x81, 0x03, 0x01, 0xc0, 0x30, 0x18, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0c, 0x1b, 0x0d, 0x87, 0xc4, 0xb3, 0x60, 0x30, 0x30, 0x0c, 0x1b, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x0c, 0x09, 0x1f, 0xcd, 0x03, 0xe1, 0xc0, 0x10, 0x60, 0x06, 0x0e, 0x03, 0x00, 0x00, 0x00,
    0x00, 0x0c, 0x00, 0x0d, 0x87, 0xc0, 0xc3, 0xd8, 0x20, 0x60, 0x06, 0x3f, 0x8f, 0xc0, 0x03, 0xe0,
    0x00, 0x0c, 0x00, 0x1f, 0xc1, 0x61, 0x83, 0x70, 0x00, 0x60, 0x06, 0x0e, 0x03, 0x01, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x0d, 0x81, 0x63, 0x63, 0x60, 0x00, 0x30, 0x0c, 0x1b, 0x03, 0x01, 0x80, 0x00,
    0x00, 0x0c, 0x00, 0x0d, 0x87, 0xc6, 0x91, 0xf0, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x03, 0x07, 0xc1, 0xe0, 0x61, 0xf0, 0x70, 0x7f, 0x1e, 0x0f, 0x00, 0x00, 0x00,
    0x00, 0x03, 0x1e, 0x03, 0x00, 0x60, 0x30, 0x61, 0x80, 0xc0, 0x03, 0x33, 0x19, 0x81, 0x80, 0xc0,
    0x00, 0x06, 0x33, 0x07, 0x03, 0xc0, 0xe0, 0xc1, 0xf8, 0xfc, 0x06, 0x1f, 0x18, 0xc1, 0x80, 0xc0,
    0x00, 0x0c, 0x37, 0x83, 0x06, 0x00, 0x31, 0xb0, 0x0c, 0xc6, 0x0c, 0x31, 0x98, 0xc0, 0x00, 0x00,
    0x00, 0x18, 0x3d, 0x83, 0x0c, 0x02, 0x33, 0x30, 0x8c, 0xc6, 0x0c, 0x31, 0x8f, 0xc0, 0x00, 0x00,
    0x18, 0x30, 0x39, 0x83, 0x0c, 0x06, 0x33, 0xf9, 0x98, 0xcc, 0x0c, 0x33, 0x00, 0xc1, 0x80, 0xc0,
    0x18, 0x60, 0x1f, 0x0f, 0xcf, 0xe3, 0xe0, 0x30, 0xf0, 0x78, 0x0c, 0x1e, 0x03, 0x81, 0x80, 0x40,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x0f, 0x83, 0x83, 0xc3, 0xe0, 0xf0, 0xf8, 0x7f, 0x3f, 0x87, 0x0c, 0x63, 0xf0,
    0x18, 0x00, 0x0c, 0x18, 0xc6, 0xc6, 0x63, 0x31, 0x98, 0xcc, 0x60, 0x30, 0x0c, 0x0c, 0x60, 0xc0,
    0x30, 0x3e, 0x06, 0x00, 0xcd, 0xe6, 0x33, 0xf1, 0x80, 0xc6, 0x7e, 0x3f, 0x18, 0x0c, 0x60, 0xc0,
    0x60, 0x00, 0x03, 0x07, 0x8f, 0x67, 0xf3, 0x19, 0x80, 0xc6, 0x60, 0x30, 0x19, 0xcf, 0xe0, 0xc0,
    0x30, 0x3e, 0x06, 0x06, 0x0d, 0xe6, 0x33, 0x19, 0x80, 0xc6, 0x60, 0x30, 0x18, 0xcc, 0x60, 0xc0,
    0x18, 0x00, 0x0c, 0x00, 0x0c, 0x06, 0x33, 0x31, 0x8c, 0xc6, 0x60, 0x30, 0x18, 0xcc, 0x60, 0xc0,
    0x00, 0x00, 0x00, 0x06, 0x06, 0x66, 0x33, 0xe0, 0xf8, 0xfc, 0x7f, 0x30, 0x0f, 0xcc, 0x63, 0xf0,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x0e, 0x63, 0x30, 0x18, 0xcc, 0x63, 0xc3, 0xe0, 0xf0, 0xf8, 0x3c, 0x1f, 0x98, 0xcc, 0x66, 0x30,
    0x06, 0x66, 0x30, 0x1d, 0xce, 0x66, 0x63, 0x31, 0x98, 0xcc, 0x60, 0x06, 0x18, 0xcc, 0x66, 0x30,
    0x06, 0x6c, 0x30, 0x1f, 0xcf, 0x66, 0x33, 0x19, 0x8c, 0xc6, 0x3e, 0x06, 0x18, 0xcc, 0x66, 0x30,
    0x06, 0x78, 0x30, 0x1a, 0xcd, 0xe6, 0x33, 0x19, 0x8c, 0xc6, 0x03, 0x06, 0x18, 0xc6, 0xc6, 0xb0,
    0xc6, 0x6c, 0x30, 0x18, 0xcc, 0xe6, 0x33, 0xf1, 0x8c, 0xfc, 0x23, 0x06, 0x18, 0xc6, 0xc7, 0xf0,
    0xc6, 0x66, 0x30, 0x18, 0xcc, 0x66, 0x33, 0x01, 0xac, 0xd8, 0x63, 0x06, 0x18, 0xc3, 0x87, 0x70,
    0x7c, 0x63, 0x3f, 0x98, 0xcc, 0x63, 0xe3, 0x00, 0xf8, 0xcc, 0x3e, 0x06, 0x0f, 0x83, 0x86, 0x30,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc6, 0x63, 0x3f, 0x87, 0x00, 0x01, 0xc0, 0x40, 0x00, 0x18, 0x00, 0x30, 0x00, 0x00, 0x60, 0x00,
    0x6c, 0x63, 0x03, 0x06, 0x0c, 0x00, 0xc0, 0xe0, 0x00, 0x18, 0x1e, 0x3e, 0x0f, 0x03, 0xe3, 0xc0,
    0x38, 0x63, 0x06, 0x06, 0x06, 0x00, 0xc1, 0xb0, 0x00, 0x10, 0x03, 0x33, 0x19, 0x86, 0x66, 0x60,
    0x38, 0x3e, 0x0c, 0x06, 0x03, 0x00, 0xc0, 0x00, 0x00, 0x08, 0x3f, 0x31, 0x98, 0x0c, 0x67, 0xe0,
    0x6c, 0x06, 0x18, 0x06, 0x01, 0x80, 0xc0, 0x00, 0x00, 0x00, 0x63, 0x31, 0x98, 0x0c, 0x66, 0x00,
    0xc6, 0x06, 0x30, 0x06, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x63, 0x31, 0x98, 0xcc, 0x66, 0x30,
    0xc6, 0x06, 0x3f, 0x87, 0x00, 0x61, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0x3f, 0x0f, 0x87, 0xe3, 0xe0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x00, 0x30, 0x03, 0x00, 0xc6, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6c, 0x3f, 0x3e, 0x00, 0x00, 0x06, 0x60, 0x61, 0x88, 0xf8, 0x3c, 0x3e, 0x07, 0xcf, 0xc3, 0xc0,
    0x60, 0x63, 0x33, 0x07, 0x01, 0xc6, 0xc0, 0x61, 0xdc, 0xcc, 0x66, 0x33, 0x0c, 0xcc, 0x66, 0x00,
    0x78, 0x63, 0x31, 0x83, 0x00, 0xc7, 0x80, 0x61, 0xfc, 0xc6, 0x63, 0x31, 0x98, 0xcc, 0x03, 0xe0,
    0x60, 0x63, 0x31, 0x83, 0x00, 0xc6, 0xc0, 0x61, 0xac, 0xc6, 0x63, 0x31, 0x98, 0xcc, 0x00, 0x30,
    0x60, 0x3f, 0x31, 0x83, 0x00, 0xc6, 0x60, 0x61, 0x8c, 0xc6, 0x63, 0x31, 0x98, 0xcc, 0x06, 0x30,
    0x60, 0x03, 0x31, 0x8f, 0xc4, 0xc6, 0x31, 0xf9, 0x8c, 0xc6, 0x3e, 0x3f, 0x0f, 0xcc, 0x03, 0xe0,
    0x60, 0x3e, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0xc0, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0x1c, 0x87, 0x00, 0x00, 0xc0,
    0x7c, 0x63, 0x31, 0x98, 0xcc, 0x66, 0x33, 0xf8, 0x30, 0x18, 0x0c, 0x27, 0x0e, 0x00, 0x00, 0x00,
    0x30, 0x63, 0x31, 0x9a, 0xc6, 0xc6, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00, 0x1c, 0x00, 0x00, 0xc0,
    0x30, 0x63, 0x1b, 0x1f, 0xc3, 0x86, 0x30, 0x60, 0x60, 0x18, 0x06, 0x00, 0x18, 0x20, 0x00, 0xc0,
    0x30, 0x63, 0x1b, 0x0f, 0x83, 0x86, 0x30, 0xc0, 0x30, 0x18, 0x0c, 0x00, 0x10, 0x60, 0x00, 0xc0,
    0x32, 0x63, 0x0e, 0x0d, 0x86, 0xc3, 0xf1, 0x80, 0x30, 0x18, 0x0c, 0x00, 0x00, 0xe0, 0x00, 0xc0,
    0x1c, 0x3f, 0x0e, 0x08, 0x8c, 0x60, 0x33, 0xf8, 0x18, 0x18, 0x18, 0x00, 0x01, 0xc0, 0x00, 0xc0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x18, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x1c, 0x00, 0x18, 0xc1, 0x83, 0xc1, 0xb0, 0x78, 0x00, 0x00, 0x1f, 0x00, 0x03, 0xc3, 0xe0,
    0x78, 0x36, 0x31, 0x98, 0xc1, 0x86, 0x00, 0x00, 0x84, 0x7e, 0x1b, 0x03, 0x00, 0x04, 0x20, 0x00,
    0xcc, 0x30, 0x1f, 0x18, 0xc1, 0x83, 0xe0, 0x01, 0x32, 0xc6, 0x36, 0x00, 0x00, 0x0b, 0x90, 0x00,
    0xc0, 0x7c, 0x31, 0x8f, 0x80, 0x06, 0x30, 0x01, 0x42, 0xc6, 0x6c, 0x00, 0x0f, 0x8a, 0x50, 0x00,
    0xc0, 0x30, 0x31, 0x81, 0x81, 0x86, 0x30, 0x01, 0x42, 0x7e, 0x36, 0x00, 0x00, 0x0b, 0x90, 0x00,
    0xc6, 0x30, 0x1f, 0x07, 0xc1, 0x83, 0xe0, 0x01, 0x32, 0x00, 0x1b, 0x00, 0x00, 0x0a, 0x50, 0x00,
    0x7c, 0x7f, 0x31, 0x81, 0x81, 0x80, 0x30, 0x00, 0x84, 0x7c, 0x00, 0x00, 0x00, 0x04, 0x20, 0x00,
    0x30, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x38, 0x00, 0x1c, 0x0e, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x06, 0x03, 0x00,
    0x6c, 0x08, 0x06, 0x03, 0x03, 0x06, 0x31, 0xf8, 0x00, 0x00, 0x38, 0x1f, 0x1b, 0x0e, 0x67, 0x30,
    0x6c, 0x3e, 0x0c, 0x06, 0x06, 0x06, 0x33, 0xd0, 0x30, 0x00, 0x18, 0x31, 0x8d, 0x86, 0xc3, 0x60,
    0x38, 0x08, 0x18, 0x03, 0x00, 0x06, 0x31, 0xd0, 0x30, 0x00, 0x18, 0x31, 0x86, 0xc7, 0xa3, 0xc0,
    0x00, 0x00, 0x1e, 0x0e, 0x00, 0x06, 0x30, 0x50, 0x00, 0x00, 0x3c, 0x1f, 0x0d, 0x83, 0x61, 0xf0,
    0x00, 0x3e, 0x00, 0x00, 0x00, 0x06, 0x30, 0x50, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x06, 0xf3, 0x18,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x50, 0x00, 0x18, 0x00, 0x1f, 0x00, 0x0c, 0xf6, 0x70,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0xf8,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xe0, 0x18, 0x0c, 0x03, 0x03, 0x03, 0x91, 0xb0, 0xf0, 0x3f, 0x3c, 0x0c, 0x03, 0x01, 0x83, 0x60,
    0x36, 0x00, 0x02, 0x04, 0x0c, 0xc4, 0xe0, 0x01, 0x98, 0x6c, 0x66, 0x02, 0x04, 0x06, 0x60, 0x00,
    0x6c, 0x18, 0x1e, 0x0f, 0x07, 0x83, 0xc1, 0xe0, 0xf0, 0xcf, 0x60, 0x3f, 0x9f, 0xcf, 0xe7, 0xf0,
    0x3a, 0x1e, 0x33, 0x19, 0x8c, 0xc6, 0x63, 0x31, 0x98, 0xfc, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x00,
    0xf6, 0x03, 0x3f, 0x9f, 0xcf, 0xe7, 0xf3, 0xf9, 0xfc, 0xcc, 0x60, 0x3f, 0x1f, 0x8f, 0xc7, 0xe0,
    0x6f, 0x63, 0x31, 0x98, 0xcc, 0x66, 0x33, 0x19, 0x8c, 0xcc, 0x63, 0x30, 0x18, 0x0c, 0x06, 0x00,
    0xcf, 0x3e, 0x31, 0x98, 0xcc, 0x66, 0x33, 0x19, 0x8c, 0xcf, 0x3e, 0x3f, 0x9f, 0xcf, 0xe7, 0xf0,
    0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x0c, 0x06, 0x0d, 0x8f, 0x83, 0x90, 0xc0, 0x30, 0x30, 0x39, 0x1b, 0x00, 0x07, 0x81, 0x80,
    0x08, 0x10, 0x19, 0x80, 0x0c, 0xc4, 0xe0, 0x20, 0x40, 0xcc, 0x4e, 0x00, 0x0f, 0x8c, 0xc0, 0x40,
    0x7e, 0x3f, 0x1f, 0x8f, 0xcc, 0x67, 0x31, 0xe0, 0xf0, 0x78, 0x3c, 0x1e, 0x1a, 0xcd, 0xe6, 0x30,
    0x18, 0x0c, 0x06, 0x03, 0x0e, 0x67, 0xb3, 0x31, 0x98, 0xcc, 0x66, 0x33, 0x1f, 0xef, 0x66, 0x30,
    0x18, 0x0c, 0x06, 0x03, 0x0c, 0x66, 0xf3, 0x19, 0x8c, 0xc6, 0x63, 0x31, 0x9b, 0x6e, 0x66, 0x30,
    0x18, 0x0c, 0x06, 0x03, 0x0c, 0x66, 0x73, 0x19, 0x8c, 0xc6, 0x63, 0x31, 0x98, 0xec, 0x66, 0x30,
    0x7e, 0x3f, 0x1f, 0x8f, 0xcf, 0xc6, 0x31, 0xf0, 0xf8, 0x7c, 0x3e, 0x1f, 0x0f, 0xc7, 0xc3, 0xe0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x18, 0x0c, 0x1b, 0x03, 0x0c, 0x00, 0x00, 0xc0, 0x30, 0x18, 0x39, 0x1b, 0x07, 0x80, 0x00, 0x00,
    0x20, 0x33, 0x00, 0x04, 0x0f, 0x83, 0xc0, 0x20, 0x40, 0x66, 0x4e, 0x00, 0x0c, 0xc7, 0xe3, 0xc0,
    0xc6, 0x63, 0x31, 0x98, 0xcc, 0xc6, 0x60, 0xf0, 0x78, 0x3c, 0x1e, 0x0f, 0x07, 0x81, 0xb6, 0x60,
    0xc6, 0x63, 0x31, 0x98, 0xcc, 0x66, 0xe0, 0x18, 0x0c, 0x06, 0x03, 0x01, 0x80, 0xc7, 0xf6, 0x00,
    0xc6, 0x63, 0x31, 0x8f, 0x8f, 0xc6, 0x31, 0xf8, 0xfc, 0x7e, 0x3f, 0x1f, 0x8f, 0xcd, 0x86, 0x00,
    0xc6, 0x63, 0x31, 0x81, 0x8c, 0x06, 0x33, 0x19, 0x8c, 0xc6, 0x63, 0x31, 0x98, 0xcd, 0x86, 0x30,
    0x7c, 0x3e, 0x1f, 0x01, 0x8c, 0x06, 0xe1, 0xf8, 0xfc, 0x7e, 0x3f, 0x1f, 0x8f, 0xc7, 0xf3, 0xe0,
    0x00, 0x00, 0x00, 0x00, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x30, 0x0c, 0x0c, 0x0d, 0x83, 0x00, 0xc0, 0x60, 0xd8, 0x0c, 0x39, 0x0c, 0x03, 0x01, 0x83, 0x90,
    0x08, 0x10, 0x33, 0x00, 0x00, 0x81, 0x01, 0x98, 0x00, 0x16, 0x4e, 0x02, 0x04, 0x06, 0x64, 0xe0,
    0x78, 0x3c, 0x1e, 0x0f, 0x03, 0x81, 0xc0, 0xe0, 0x70, 0x3e, 0x7c, 0x1e, 0x0f, 0x07, 0x83, 0xc0,
    0xfc, 0x7e, 0x3f, 0x1f, 0x81, 0x80, 0xc0, 0x60, 0x30, 0x66, 0x66, 0x33, 0x19, 0x8c, 0xc6, 0x60,
    0xc0, 0x60, 0x30, 0x18, 0x01, 0x80, 0xc0, 0x60, 0x30, 0xc6, 0x63, 0x31, 0x98, 0xcc, 0x66, 0x30,
    0xc6, 0x63, 0x31, 0x98, 0xc1, 0x80, 0xc0, 0x60, 0x30, 0xc6, 0x63, 0x31, 0x98, 0xcc, 0x66, 0x30,
    0x7c, 0x3e, 0x1f, 0x0f, 0x87, 0xe3, 0xf1, 0xf8, 0xfc, 0x7e, 0x63, 0x1f, 0x0f, 0x87, 0xc3, 0xe0,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x6c, 0x00, 0x00, 0x06, 0x01, 0x80, 0xc1, 0xb0, 0x30, 0xc0, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0c, 0x1e, 0x01, 0x02, 0x03, 0x30, 0x00, 0x40, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x33, 0x18, 0xcc, 0x66, 0x33, 0x19, 0x8c, 0xf8, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xcc, 0x3f, 0x37, 0x98, 0xcc, 0x66, 0x33, 0x19, 0x8c, 0xcc, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc6, 0x00, 0x3d, 0x98, 0xcc, 0x66, 0x33, 0x19, 0x8c, 0xc6, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xc6, 0x0c, 0x39, 0x98, 0xcc, 0x66, 0x33, 0x18, 0xfc, 0xfc, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x7c, 0x00, 0x1f, 0x0f, 0xc7, 0xe3, 0xf1, 0xf8, 0x0c, 0xc0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xc0, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
];

// Font layout (generated from Angelcode Bitmap Font generator)
#[rustfmt::skip]
pub static MICROKNIGHT_LAYOUT: &[(u8, u8)] = &[
    (0, 0), (9, 0), (18, 0), (27, 0), (36, 0), (45, 0), (54, 0), (63, 0), (72, 0), (81, 0), (90, 0), (99, 0), (108, 0),
    (117, 0), (0, 9), (9, 9), (18, 9), (27, 9), (36, 9), (45, 9), (54, 9), (63, 9), (72, 9), (81, 9), (90, 9), (99, 9),
    (108, 9), (117, 9), (0, 18), (9, 18), (18, 18), (27, 18), (36, 18), (45, 18), (54, 18), (63, 18), (72, 18), (81, 18),
    (90, 18), (99, 18), (108, 18), (117, 18), (0, 27), (9, 27), (18, 27), (27, 27), (36, 27), (45, 27), (54, 27), (63, 27),
    (72, 27), (81, 27), (90, 27), (99, 27), (108, 27), (117, 27), (0, 36), (9, 36), (18, 36), (27, 36), (36, 36), (45, 36),
    (54, 36), (63, 36), (72, 36), (81, 36), (90, 36), (99, 36), (108, 36), (117, 36), (0, 45), (9, 45), (18, 45), (27, 45),
    (36, 45), (45, 45), (54, 45), (63, 45), (72, 45), (81, 45), (90, 45), (99, 45), (108, 45), (117, 45), (0, 54), (9, 54),
    (18, 54), (27, 54), (36, 54), (45, 54), (54, 54), (63, 54), (72, 54), (81, 54), (90, 54), (99, 54), (0, 0), (0, 0),
    (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
    (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0), (0, 0),
    (108, 54), (117, 54), (0, 63), (9, 63), (18, 63), (27, 63), (36, 63), (45, 63), (54, 63), (63, 63), (72, 63), (81, 63),
    (90, 63), (99, 63), (108, 63), (117, 63), (0, 72), (9, 72), (18, 72), (27, 72), (36, 72), (45, 72), (54, 72), (63, 72),
    (72, 72), (81, 72), (90, 72), (99, 72), (108, 72), (117, 72), (0, 81), (9, 81), (18, 81), (27, 81), (36, 81), (45, 81),
    (54, 81), (63, 81), (72, 81), (81, 81), (90, 81), (99, 81), (108, 81), (117, 81), (0, 90), (9, 90), (18, 90), (27, 90),
    (36, 90), (45, 90), (54, 90), (63, 90), (72, 90), (81, 90), (90, 90), (99, 90), (108, 90), (117, 90), (0, 99), (9, 99),
    (18, 99), (27, 99), (36, 99), (45, 99), (54, 99), (63, 99), (72, 99), (81, 99), (90, 99), (99, 99), (108, 99), (117, 99),
    (0, 108), (9, 108), (18, 108), (27, 108), (36, 108), (45, 108), (54, 108), (63, 108), (72, 108), (81, 108), (90, 108),
    (99, 108), (108, 108), (117, 108), (0, 117), (9, 117), (18, 117), (27, 117), (36, 117), (45, 117), (54, 117), (63, 117),
    (72, 117), (81, 117),
];
